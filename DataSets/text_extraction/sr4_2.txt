the internal wall. For the most part these procedures are straightforward, if some- what tedious, computational geometry problems. Modifying alternative features Once the potentially useful features are found, the final Vol 11 No 4 October 1990 227 Resistance ] Path with I adjacent edges I clearance Path through solid material I Cut channel Path with obstructing wall I Punch hole Function Feature Modification Figure 7. Organization of function sharing recognition and modification procedures step is to execute the modification operators associated with each feature. In the case of the fluid resistance, for example, if the feature found by the recognition proce- dure were a path obstructed by a wall, the modification would be to punch a hole in the wall. Modifications are carried out only ff the modification .... la net ~use geometrical interference between different regions of the design. Geometrical interference is defined as the situa- tion in which two sections of material overlap in the two-and-one-half dimensional space. The modification procedures, like the recognition procedures, are ad hoc. As an example, punching a hole in a section involves removing the existing section, replacing it with two new shorter sections with a gap between their ends, and revising the component connection list. DISCUSSION OF FUNCTION SHARING PROCEDURE The preceding sections have not dealt with many of the subtleties involved in function sharing. This section analyses the procedure from several perspectives and discusses some of the issues associated with adapting the procedure to other domains. Meaning of physical descriptions The physical descriptions produced by the function sharing procedure can be thought of as a way of assigning parameters to a design description. In the case of a piston-cylinder, there are many possible parameters that could be assigned to features in the physical description and that may be relevant to the design. The function sharing procedure is a way of assigning those parameters that should be considered in a particular design. For example, a piston-cylinder is normally parameterized by the piston area and the stroke length. There are, how- ever, many other parameters that could relate to the element--among them the thermal conductivity of the cylinder wall, the size of the input and output ports, or the mass of the piston. After the function sharing procedure operated on the rate-of-pressure indicator example, two of these parameters were identified as important--the clearence between the piston and cylin- der and the volume of one end of the cylinder. This identification resulted from the function sharing feature recognition and modification procedures. The procedure has identified a different and important set of parameters and the designer is alerted that the original design can be simplified if these parameters are considered when per- forming the detailed design and selecting dimensions. Impairing existing functions Modifying a design to exploit a secondary property of some structural element may invalidate the primary function of that element. For example, consider the result of eliminating the fluid capacitance in Figure 8. The expansion of the diameter of the resistance would impair its resistive function. In our implementation of function sharing, all mod- ifications that do not lead to geometrical interference are Resistance Capacitance Figure 8. Modification invalidates primary function of element 228 DESIGN STUDIES carried out. We leave the judgement as to whether or not existing functions have been impaired to the designer. To do otherwise would require explicit knowledge of why a particular element functions the way it does, or would require analysis tools that can determine that a compo- nent no longer performs as specified. If the representa- tion of each structural element also contained a set of constraints on allowable modifications to its structure, then some function-impairing modifications could also be avoided. Design knowledge level There are many alternative approaches to expressing function sharing design knowledge. We chose the physic- al feature level. This choice is a compromise between efficiency and expressiveness. For example, Figure 9 illustrates the variety of ways one might represent the concept of fluid resistance in a design system. The simplest approach would be to identify particular structural elements with particular functional elements. We call this the component level. This approach constrains the design system to use a particular component every time resistance is needed. Alternatively the system could represent resistance as a variety of generic physical features like holes, channels or porous materials. We call this the feature level. This approach gives the system more freedom to construct a resistive configuration. The system could also represent resistance as a mathematical concept with a generalized, parameterized model of geometry. We call this the physics level. Given this scheme, a system has a great deal of flexibility in synthesizing resistive configurations; however, with the flexibility and expressiveness come computational com- plexity. The reasoning required to derive a resistive configuration from equations at the physics level is severe; but fmding resistance at the component level is trivial. We chose a middle ground. Representing resist- ance as a set of physical features gives flexibility and expressiveness, without swamping the system with com- plexity. _o c o e-t E o Acme Fluid Resistance A-O58Z Figure 9. Knowledge level for fluid resistance Vol 11 No 4 October 1990 229 Example results from implementation The ideas in this article have been implemented as a computer program. This subsection shows illustrations of the screen output of the program simplifying two different accelerometers. The accelerometer designs are highly stylized into our simple physical representation language. Each figure shows the progression of the design simplification as the user instructs the program to eliminate structural elements. Our implementation of the function sharing procedure leaves the control to the user. Specifically, the user selects an element to eliminate and chooses from among several modified designs. The con- trol could also easily have been automatic, although this results in the generation of a collection of designs with a worst-case size that is exponential in the number of structural elements. In each of the examples only one or two of the outcomes of the program are shown, although in general there will be many designs generated. The particular examples shown in this section illustrate the range of simplification operations that the program can perform. There is a brief textual explanation for each figure. Accelerometer I Figure 10 shows the program trace as it simplifies an accelerometer. An accelerometer is a device that pro- duces a displacement (or other output quantity) prop- ortional to the acceleration of the device reference frame. In most cases accelerometers will consist of some sort of mass and spring. The initial design in Figure 10 consists of a mass attached to a spring which is in turn attached to ground. The spring shown is the orthogonally-connected rectangular-prismatic version of an oval spring. The program is directed to eliminate the mass element. First the mass is deleted from the design. Next the system searches for alternative potentially massive features with respect to the top centre portion of the spring. The system finds the uppermost section of the spring has massive properties, and accentuates these properties by increasing the section thickness. Accelerometer 2 Figure 11 shows the program operating on another accelerometer design. In this case, the initial design consists of a cantilever beam attached to a mass and damper. The beam and damper are attached to ground. The program is instructed to eliminate the mass. It first deletes the mass, and then looks for massive features with respect to the end of the cantilever beam. It finds that the head--is rnas.~ive, and ~ee@tatnatol thil p_rnr~rt_y hy increasing the beam thickness. Next, the program is instructed to eliminate the damper from the design. First it deletes the damper and then looks for alternative damping features with respect to the end of the cantilever beam. It f'mds that the beam has some damping because a I I  I I Figure 10. Accelerometer example 1 it moves in a gas environment causing drag' The program accentuates this property by changing the design en- vironment to a viscous fluid (indicated by the dots). In another branch of the simplification, the program ex- tends the piston thickness in order to replace the mass. 230 DESIGN STUDIES I ¢ I I ......... ° ..... ...... . • • . ..... ::::1 I Figure 11. Accelerometer example 2 Novelty in mechanical design A novel mechanical design can be defined as one that no one (or at least not the design community in question) has generated before. One hypothesis of this work is that the unbiased application of the physical-feature-based design operations in function sharing will yield some novel designs. One design the computer implementation generated truly surprised us. Figure 12 shows one branch of the function sharing procedure on the rate-of-climb example. In this case eliminating the fluid capacitance led to a novel use of the cavity associated with the space between the resistance and the piston. The recognition procedure identified the cavity between the resistance and the cylinder wall as potentially capacitive and the J Detached I I Attached Viscous environment I I modification procedure exploited the situation by pun- ching an access hole in the cavity. As long as the feature recognition procedures are sound, designs will be generated that are viable candi- dates. Some of these designs will be unanticipated be- cause the recognition procedures are more thorough and faster than human designers, and because they do not encode any designer intention or functional information about the physical description. ExtensibUity Although this article describes only a first step towards understanding a complicated class of design activity, we Vol 11 No 4 October 1990 231 r, m II Figure 12. A surprising design believe that the function sharing ideas presented in this article can be applied to other domains. There are several requirements on these domains, and on the way in which knowledge about the domains is organized. Certain properties of a domain also determine the success or failure of the function sharing procedure. • There must be a definable language for describing the function of the constituent elements of a design. Designs in the dynamic systems domain can be de- scribed schematically with a concise functional lan- guage. Global device behaviour can be specified by a differential equation relating an input quantity to an output quantity. More important, a network of lumped-parameter elements (fluid resistances, fluid capacitances, etc.) can accurately describe the func- tional architecture of the device. The existence of a formal and concise language for the schematic descrip- tion of the device makes the function sharing proce- dure possible: the function of any particular region of the physical description can be precisely and com- pletely specified, and there is a framework upon which the function sharing knowledge base can be built. • There must be a definable mapping from function to structure. In the dynamic systems domain, each func- tional element corresponds to a set of physical features with which it can be implemented. Fluid resistance, for example, is a functional element that can be implemented with a hole in a plate, a gap between adjacent edges, or a channel cut through a solid. This mapping is accurate and concise. The corresponding mapping for aesthetically pleasing or even aerodynamic would be much more difficult to define. This is as much a requirement on the domain, as a requirement on the granularity of the functional language. In general the more free-grained the functional language, the simpler the task of generating a function-feature mapping. An additional requirement in this vein is that the physical feature recognition problem must be computationally tractable. • There must be locality of function in the physical design description. If the physical features associated with a particular functional element are highly distri- buted, then these features cannot be easily deleted from the design. In the dynamic systems domain this property is present, as indicated by the existence of definable reference points for a particular functional element. Some domains that appear to meet these criteria are architectural floor plans, mechanical support and con- straint (i.e., brackets, bearings and struts), chemical processes and machines for performing fixed automation tasks like assembly. RELATED WORK Although as far as we know no researchers have explicitly treated the problem of devising procedures for function sharing in design, several researchers have done work that relates in some way to the issues that we have addressed. We have built upon their ideas whenever possible. In this section, we give brief descriptions of publications relevant to our work from the artificial intelligence community, the design theory and methodol- ogy community, and the computer-aided design com- munity. Cagan 2 describes a method for deriving novel structu- ral modifications to a beam design based on equations describing the design. The key insight is that mathema- tical integrals in the system description are indications that the structure of the design can be usefully decom- posed into subregions. For example, since the strength of a bar is expressed in terms of an integral along the bar radius, it may make sense to consider the bar as consist- hag of concentric annuli. Within this formulation, an optimization of the design may specify zero density for the inner annuli, thus generating a tube. 232 DESIGN STUDIES Reference 3 is relevant to our work primarily because it introduces the no-function-in-structure principle. This "principle states that systems intended to derive behaviour or function from a structural description of a device must represent the device with a description that is devoid of any functional information. Freeman's paper 4 is important because it is one of the first to discuss using connections between functional and structural descriptions as a knowledge base for perform- ing design operations computationally. Hirschtick 5 deals with the problem of providing advice for the design of an aluminium extrusion cross-section. The basic approach is to use a hierarchical structure of features (for example, lines are bottom level features and knife-edges are top level features) as a knowledge base in order to recognize important design attributes in the two-dimensional cross-section. The recognized features serve as the input to a rule-based system that encodes design knowledge from an industrial aluminium extru- sion design handbook. Ishida 6 deals with the problem of deriving behaviour from structure. The work focuses on a limited class of problematic behaviours (device leakage, for example). The objective of the research is to develop a statement of the unanticipated behaviour in terms of predicate operat- ing on the geometrical representation of the problem. So device leakage, for example, is described as a property of the geometry of the device, expressed as a condition on the connectivity of a graph of part faces. Jakiela 7 integrates solids modelling with rules associ- ated with design for manufacturabllity. In particular Jakiela has encoded the Boothroyd-Dewhurst design- for-assembly guidelines as procedures operating on a solid model description of a part. The system is interac- tive and suggests to the designer modifications that will make the designer modifications that will make the designed part easier to feed in an automatic bowl feeder. If the designer accepts the suggestions, the modifications are made automatically to the solid model of the part. The program described by Murthy s is based on the idea of first attempting to find a solution to a design problem in the parameter space associated with a given design configuration. If a solution cannot be found, then modification operators change the design configuration. This procedure was applied to the problem of designing beams for torsion and bending. In one case, the system generated a description of a tube by modifying a solid bar. Reference 9 is one of the first papers attempting to describe the causal relationships within a mechanical device. This paper presents a language for describing devices, and develops a model in this language for a thermostat. The functional elements of the model are terms like: continuous and one-shot enablement, state coupling, state equivalence, state antagonism, threshold, and rate confluence. This language was designed to allow description of complex, highly nonlinear device be- haviour that cannot be described with differential equa- tions. Rieger uses these descriptions to simulate the behaviour of the devices by assigning a computational behaviour to each functional element in the device description. Rinderle 1° discusses the relationship between form and function in design. He points out that in mechanical design there is often no clear hierarchical decomposition from function to form, as there is in VLSI design. He suggests that there are some fundamental relationships between form and function in mechanical design and that these relationships can be described. Rinderle postulates that the codification of some of these relationships could help novice designers make preliminary design decisions. Suh n introduces the idea of design axioms. The paper presents the following hypothesis. There exists a small set of global principles, or axioms, which can be applied to decisions made throughout the synthesis of a manufacturing system. These axioms constitute guidelines or decision rules which lead to 'correct' decisions, i.e., those which maximize the productivity of the total manufacturing system, in all cases. The work described in this paper attempts to generate such a set of axioms. Two example axioms are: (1) minimize the number of functional requirements and constraints, (2) satisfy the primary functional require- ment first. Satisfy the others in order of importance. Sussman t2 introduces the idea of constraint nets as a computational structure. Rather than expressing mathe- matical relations as a unilateral procedure for computing certain values in terms of others, constraints express only the relationship between quantities. The constraint net can be used to compute a selected quantity from the remaining quantities. The
